/*
 * Copyright (C) 2014 Andrew Comminos
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// How to enable lints at compile time:
// allprojects {
//     tasks.withType(JavaCompile) {
//         options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//     }
// }

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
    }
}
apply plugin: 'com.android.application'

repositories {
    jcenter()
    google()
}

dependencies {
    implementation project(":libraries:humla")
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'info.guardianproject.netcipher:netcipher:2.1.0'
}


// Keep my credentials private :^)
def signingFile = file 'signing.gradle'
if (signingFile.exists()) apply from: 'signing.gradle'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        applicationId "se.lublin.mumla"
        versionCode 75
        versionName "3.4.1"
        setProperty("archivesBaseName", "mumla")
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        buildConfigField "boolean", "DONATE_NAG", "false"
    }

    buildTypes {
        release {
            minifyEnabled false
            if (signingFile.exists()) signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
        }
    }

    flavorDimensions "version"
    productFlavors {
        official {
            dimension "version"
            applicationId "se.lublin.mumla"
        }
        free {
            dimension "version"
            applicationId "se.lublin.mumla.free"
            buildConfigField "boolean", "DONATE_NAG", "true"
        }
        jenkins {
            dimension "version"
            // Abuse Jenkins environment variables. Neat.
            def env = System.getenv()
            if (env.containsKey("BUILD_NUMBER") && env.containsKey("BUILD_DISPLAY_NAME")) {
                versionCode Integer.parseInt(env.get("BUILD_NUMBER"))
                versionName env.get("BUILD_DISPLAY_NAME")
            } else {
                versionCode 1
                versionName "Unknown Nightly"
            }
            applicationId "se.lublin.mumla.jenkins"
        }
    }

    lintOptions {
        quiet false

        disable "WrongThread"
        disable "InvalidPackage"

        disable "MissingTranslation"

        ignoreWarnings false
        abortOnError true
    }
}
